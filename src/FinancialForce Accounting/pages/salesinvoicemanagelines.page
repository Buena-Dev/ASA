<apex:page standardController="c2g__codaInvoice__c" extensions="c2g.ffb_SalesInvoiceManageLinesController" sidebar="false" action="{!loadLines}">
	<apex:variable var="fields" value="{!$ObjectType.c2g__codaInvoiceLineItem__c.fields}"/>
	<apex:variable var="taxMode" value="{!taxMode}"/>

	<script src="{!URLFOR($Resource.coda2go,'coda2go/web/script/lib.js')}" type="text/javascript"></script>
    
    <script>
        CODA.documentFunctionTimer("keyup", CODA.executeQueue, 1500);
        CODA.documentFunctionTimer("click", CODA.executeQueue, 1500);
        var CODA2GoButtons = new CODA2GoPage();
        var CODA2GoBtnSaveValue = "{!$Label.codaPaymentProcessing}";
    </script>
	
    <apex:stylesheet value="{!URLFOR($Resource.c2g__coda2go,'coda2go/web/css/UberGrid.css')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.c2g__coda2go,'coda2go/web/css/style.css')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.c2g__coda2go,'coda2go/web/css/managelines.css')}"/>

	<style type="text/css">
		.datePicker{
			z-index:2000 !important;
		}

	</style>

	<script type="text/javascript">
		var FFDCGlobalThousandSeperator = "{!thousandSeparator}";
		var FFDCGlobalDecimalSeperator = "{!decimalSeparator}";
	</script>

	<script type="text/javascript" src="{!$Resource.front_billing}/front_billing/base/frameworks/jquery-1.5.min.js"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.coda2go,'coda2go/web/script/UberGrid.js')}"></script>
	<script type="text/javascript" src="{!$Resource.front_billing}/front_billing/pages/salesinvoicemanagelines/calculations.js"></script>
	<script type="text/javascript" src="{!$Resource.front_billing}/front_billing/pages/page.js"></script>
	<script type="text/javascript" src="{!$Resource.front_billing}/front_billing/utils/utilNumeric.js"></script>
	<script type="text/javascript" src="{!$Resource.front_billing}/front_billing/utils/ajaxProxy.js"></script>
			<script type="text/javascript">
				var $FFDC = jQuery.noConflict(),
					ajaxActions = {
						baseAction: {
							currency: '{!JSENCODE(invoiceCurrency)}',
							accountid: '{!invoiceAccountId}',
							documentid: '{!invoiceId}',
						},
						getTaxRate1: {
							action: 'GetTaxRate1',
							fields: ["TaxRate1__c", "TaxValue1__c"],
							calcMethods: ["calculateTax1", "calculateRow"]
						},
						getTaxRate2: {
							action: 'GetTaxRate2',
							fields: ["TaxRate2__c", "TaxValue2__c"],
							calcMethods: ["calculateTax2", "calculateRow"]
						},
						getTaxRate3: {
							action: 'GetTaxRate3',
							fields: ["TaxRate3__c", "TaxValue3__c"],
							calcMethods: ["calculateTax3", "calculateRow"]
						},
						getProductInfoTaxRate: {
							vat: {
								action: 'GetProductInfoTaxRate1',
								fields: ["UnitPrice__c", "TaxCode1__c", "TaxRate1__c", "TaxValue1__c","IncomeSchedule__c", "NumberofJournals__c", "UsePartPeriods__c", "PeriodInterval__c", "StartDate__c"],
								calcMethods: ["calculateTax1", "calculateRow"]
							},
							combined: {
								action: 'GetProductInfoTaxRate1',
								fields: ["UnitPrice__c","TaxCodeCombined__c", "TaxCode1__c", "TaxCode2__c", "TaxRate1__c", "TaxRate2__c", "TaxValue1__c", "TaxValue2__c","IncomeSchedule__c", "NumberofJournals__c", "UsePartPeriods__c", "PeriodInterval__c", "StartDate__c"],
								calcMethods: ["calculateTax1", "calculateTax2", "calculateRow"]
							},
							sut: {
								action: 'GetProductInfoTaxRate1',
								fields: ["UnitPrice__c","TaxCode1__c", "TaxRate1__c", "TaxValue1__c","TaxCode2__c", "TaxRate2__c", "TaxValue2__c","TaxCode3__c", "TaxRate3__c", "TaxValue3__c","IncomeSchedule__c", "NumberofJournals__c", "UsePartPeriods__c", "PeriodInterval__c", "StartDate__c"],
								calcMethods: ["calculateTax1", "calculateTax2", "calculateTax3", "calculateRow"]
							}
						},
						getChildTaxCodes: {
							action: 'GetChildTaxCodes',
							fields: ["TaxCode1__c", "TaxCode2__c", "TaxRate1__c", "TaxRate2__c"],
							calcMethods: ["calculateTax1", "calculateTax2", "calculateRow"]
						}
					}

				function addLine()
				{	
					var hiddenRowCount = $FFDC('#uberGrid tbody tr.hiddenRow').length;
					//The total row count minus the 4 which are the standard rows on the grid for the headers and footers
					var totalRowCount = document.getElementById("uberGrid").rows.length - 4;

					if(hiddenRowCount == 0 && totalRowCount < '{!MaxLines}')
					{
						loadMoreLines();
					}
					else if(hiddenRowCount == 0 && totalRowCount >= '{!MaxLines}')
					{
						alert('{!$Label.ManageLinesLimitReached}');
					}
				}

				function gridSetup()
				{
					var taxType = '{!taxMode}';

					//Setup global Discount variable, so we can access anywehere within our JS.
					$FFDC.globalDiscount = parseFloat({!invoiceDiscount});
					
					$FFDC.errorString = '{!$Label.Error}';
					
					//SETUP KEYBOARD GRID
					$FFDC('#uberGrid').UberGrid({
						'addLine': $FFDC('.newlinebutton')
					});
					
					//SETUP CALCULATION JS FOR THIS GRID
					$FFDC('#uberGrid').CalcGrid();
					
					//CALCULATE EACH ROW
					$FFDC('#uberGrid tbody tr:not(.hiddenRow)').each(function (index, element) {
						$FFDC().CalcGrid('calculateRow', $FFDC(element));
					});

					//Attach ajax actions to lookups for async communication with the server when the lookup values have changed
					registerAjaxActionOnLookup('TaxCode1__c', ajaxActions.getTaxRate1);

					//Setup tax specific lookups
					switch(taxType){
						case 'VAT':
							gridVATSetup();
							break;

						case 'SUT':
							gridSUTSetup();
							break;

						case 'COMB':
							gridCOMBSetup();
							break;
					}
				}

				function gridVATSetup(){
					registerAjaxActionOnLookup('Product__c', ajaxActions.getProductInfoTaxRate.vat);
				}

				function gridSUTSetup(){
					registerAjaxActionsOnLookups({
						'TaxCode2__c': ajaxActions.getTaxRate2,
						'TaxCode3__c': ajaxActions.getTaxRate3,
						'Product__c':  ajaxActions.getProductInfoTaxRate.sut
					});
				}

				function gridCOMBSetup(){
					registerAjaxActionsOnLookups({
						'TaxCode2__c': ajaxActions.getTaxRate2,
						'TaxCodeCombined__c': ajaxActions.getChildTaxCodes,
						'Product__c': ajaxActions.getProductInfoTaxRate.combined
					});
				}

				/**
				* Registers an asyncronous ajax action with a lookup input element
				* @param {String} lookupFieldName The Salesforce API name for the lookup field
				* @param {Object} ajaxAction The action config object containing the Ajax Action information
				*/
				function registerAjaxActionOnLookup(lookupFieldName, ajaxAction){
					var findString = '#uberGrid tbody tr td.inputCell.reference .lookupInput .input.input_' + lookupFieldName + ':not(a)',
                		findDropdownString = '#uberGrid tbody tr td.inputCell.reference .lookupInput select.input.input_' + lookupFieldName + ':not(a)';
		                
		            $FFDC(findString).change(processLine);
		            $FFDC(findDropdownString).blur(processLine);
		            
		            function processLine()
		            {
		                var row=$FFDC(this).closest('tr'),
		                    lineIndex = row.find("input[name='lineItemIndex']").val(),
		                    action = ajaxAction.action,
		                    thisRow;
		                $FFDC(ajaxAction.fields).each(function (i, e) {
		                    row.find('input.input_' + e).closest('td.inputCell').removeClass('inputCellError').css({
		                        'height': ''
		                        }).find('div.cellInner .errorMsg').remove();
		                 });
		                if(!this.value || this.value && this.value.length === 0)
		                {
							thisRow = $FFDC(this).closest('tr');
							$FFDC(ajaxAction.fields).each(function (i, e) {
								thisRow.find('input.input_' + e).val('');
							});
							if(this.tagName.toLowerCase() == 'select')
		                    {
		                        idPrefix = this.id.substr(0, this.id.length - 5); //sparing the suffix '_lkid'
		                        //get hidden fields
		                        $FFDC("[id='" + idPrefix + "']").val('');
		                        $FFDC("[id='" + idPrefix + "_lkold']").val('');
		                    }
		                    else if(this.tagName.toLowerCase() == 'input')
		                    	//get hidden field
		                        $FFDC("[id='" + this.id + "_lkid']").val('');                       
							$FFDC(ajaxAction.calcMethods).each(function (i, e) {
								$FFDC('#uberGrid').CalcGrid(e, thisRow);
							});
		                }
		                else
		                {
		                    $FFDC(ajaxAction.fields).each(function (i, e) {
		                        var field = row.find('input.input_' + e),
									waitingTarget = field.attr("type") === "checkbox" ? field.parent() : field;
				
								waitingTarget.addClass('ajaxWaiting');
								field.closest('td.inputCell').removeClass('inputCellError').css({
									'height': ''
								}).find('div.cellInner .errorMsg').remove();
		                     });
		                    performAction(lineIndex, action);
		                }
		            }
				}

				/**
				* Registers a map (object keyed by field name, with desired Ajax Actions as values) of lookups with Ajax Actions
				* @param {Object} lookupMap Object containing all fieldnames of lookups and ajax actions to bind
				*/
				function registerAjaxActionsOnLookups(lookupMap){
					$FFDC.each(lookupMap, function(fieldName, action){
						registerAjaxActionOnLookup(fieldName, action);
					});
				}

				$FFDC(window).load(function () {
					ML.getPopulatedValues();
					$FFDC('#uberGridWaiting').css({
						'display': 'none'
					});
				});
			</script>

	<apex:form onsubmit="$FFDC('.newlinebutton').attr('disabled','disabled');if(typeof($FFDC)!='undefined'){$FFDC('#uberGridWaiting').css({'display':'block'});};if(CODA2GoButtons.disableSaveButtons){return CODA2GoButtons.disableSaveButtons();};">
		<!-- Indicator -->
		<div id="indicator">
			<img src="/s.gif" align="absMiddle"/>
			<span id="indicatortext">
			</span>
		</div>

		<apex:actionFunction immediate="true" name="loadMoreLines" action="{!loadMoreLines}" onComplete="$FFDC('#uberGridWaiting').css({'display': 'none'});gridSetup();$FFDC.addLine();$FFDC('.newlinebutton').removeAttr('disabled');" reRender="pageBlock"/>

		<!-- PAGE TITLE -->
		<apex:sectionHeader title="{!$Label.c2g__managelinestitle}" subtitle="{!c2g__codaInvoice__c.Name}"/>
			<apex:pageBlock id="pageBlock" title="{!$Label.c2g__invoicelinestitle}">

				<apex:pageBlockButtons >
                	<!-- Hidden Buttons -->
                	<apex:commandButton action="{!saveAll}" id="save_h" value="{!$Label.c2g__save}" onclick="CODA.forceDeleteQueue();CODA.indicatorOn('{!$Label.c2g__paymentselectionsaving}');" oncomplete="CODA.indicatorOff();$FFDC('#uberGridWaiting').css({'display':'none'})" styleclass="hiddensubmit" reRender="errorMessages,linesPanel"/>
                	<apex:commandButton action="{!cancel}" id="cancel_h" value="{!$Label.c2g__cancel}" immediate="true"  styleclass="hiddensubmit"/>


                    <apex:outputPanel rendered="{!!pageLoadErrors}" layout="none">
                        <apex:commandButton value="{!$Label.c2g__save}" id="save" onclick="if(!CODA.queing()){document.getElementById('{!$Component.save_h}').click()};return false;" />
                    </apex:outputPanel>
                    <apex:commandButton value="{!$Label.c2g__cancel}" id="cancel" onclick="if(!CODA.queing()){document.getElementById('{!$Component.cancel_h}').click()};return false;" />

                    <script>
                    	CODA2GoButtons.initButtons(["{!$Component.save}","{!$Component.cancel}"]);
                	</script>
                </apex:pageBlockButtons>
				
				<apex:PageMessages id="errorMessages"/>
				
				<apex:outputPanel id="linesPanel">
					<apex:variable var="fieldsInFieldSet" value="{!0}"/>
					<!-- HARD SET FIELDS -->
					<div class="uberGridWrapper hideGrid_{!pageLoadErrors}">
						<div class="waiting" id="uberGridWaiting">
							<div class="waitingBG"></div>
							<div class="waitingIcon"></div>
						</div>
						<table cellpadding="0" cellspacing="0" border="0" class="uberGrid managelines" id="uberGrid">
							
							<thead>
								<tr>
									<th class="aCenter ignorecol_true">
										<div class="headerInner">&nbsp;</div>
									</th>
									
									<apex:repeat value="{!ManageLinesVatFieldset}" var="f" rendered="{!IF(taxMode=='VAT',true,false)}">
									 	<apex:variable var="fieldName" value="{!f.localName}_STRING"/> 
										<apex:variable var="fieldsInFieldSet" value="{!fieldsInFieldSet+1}" rendered="{!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING',fieldName='TaxRate3__c_STRING'),false,true)}"/>
										<th class="{!f.fieldType} ignorecol_{!f.calculated} {!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING',fieldName='TaxRate3__c_STRING'),'hiddenCell','')} {!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING',fieldName='TaxRate3__c_STRING'),'ignorecol_true','')}" >
											<div class="headerInner {!IF(OR(f.fieldSetRequired, f.fieldSetDbRequired),'required','')} {!IF(fieldName='Product__c_STRING','required','')} {!f.localName}" >
												{!$ObjectType.codaInvoiceLineItem__c.fields[f.localName].label}
											</div>
										  </th>  
									</apex:repeat>
							
							 		<apex:repeat value="{!ManageLinesSutFieldset}" var="f" rendered="{!IF(taxMode=='SUT',true,false)}">
										<apex:variable var="fieldName" value="{!f.localName}_STRING"/>
										<apex:variable var="fieldsInFieldSet" value="{!fieldsInFieldSet+1}" rendered="{!IF(!IsAllowOverrideOfTaxValues && (OR(fieldName='TaxValue1__c_STRING',fieldName='TaxValue2__c_STRING',fieldName='TaxValue3__c_STRING')),false,true)}"/>
										<th class="{!f.fieldType} ignorecol_{!f.calculated} {!IF(!IsAllowOverrideOfTaxValues && (OR(fieldName='TaxValue1__c_STRING',fieldName='TaxValue2__c_STRING',fieldName='TaxValue3__c_STRING')),'hiddenCell','')} {!IF(OR(fieldName='TaxValue1__c_STRING',fieldName='TaxValue2__c_STRING',fieldName='TaxValue3__c_STRING'),'ignorecol_true','')}">
											<div class="headerInner {!IF(OR(f.fieldSetRequired, f.fieldSetDbRequired),'required','')} {!IF(fieldName='Product__c_STRING','required','')} {!f.localName}" >
												{!$ObjectType.codaInvoiceLineItem__c.fields[f.localName].label}
											</div>
										</th>
									</apex:repeat>
	
									<apex:repeat value="{!ManageLinesCombFieldset}" var="f" rendered="{!taxMode=='COMB'}">
										<apex:variable var="fieldName" value="{!f.localName}_STRING" />
										<apex:variable var="fieldsInFieldSet" value="{!fieldsInFieldSet+1}" rendered="{!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING'),false,true)}"/> 
										<th class="{!f.fieldType} ignorecol_{!f.calculated} {!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING'),'hiddenCell','')} {!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING'),'ignorecol_true','')} ">
											<div class="headerInner {!IF(OR(f.fieldSetRequired, f.fieldSetDbRequired),'required','')} {!IF(fieldName='Product__c_STRING', 'required', '')} {!f.localName}">
												{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f.localName].label}
											</div>
										</th>
									</apex:repeat>
								
									<th class="aCenter ignorecol_true">
										<div class="headerInner">&nbsp;</div>
									</th>
								</tr>
							</thead>
							
							<tbody>
				            	<apex:actionFunction name="performAction" action="{!performAction}" rerender="linesPanel,errorMessages" oncomplete="CODA2GoButtons.enableSaveButtons();$FFDC('.newlinebutton').removeAttr('disabled');">
				            		<apex:param name="lineIndex" value=""/>
				            		<apex:param name="action" value=""/>
				            	</apex:actionFunction> 
								<apex:variable var="lineNumber" value="{!0}"/>
								<apex:repeat var="viewLine" value="{!salesInvoiceLines}">
									<tr class="{!IF(viewLine.deleted,'hiddenRow','')}">
				                    	<td class="hiddenCell">
					                		<input type="hidden" disabled="disabled" value="{!lineNumber}" name="lineItemIndex" />
					                	</td> 
										<apex:variable var="lineNumber" value="{!lineNumber+1}"/>
										
										<td class="aCenter" width="30">
											<div class="cellInnerText lineNumber"><apex:outputText value="{0,number,###}"><apex:param value="{!lineNumber}" /></apex:outputText></div>
											<apex:inputCheckbox value="{!viewLine.deleted}" styleClass="deleted"/>
										</td>
										
								 		<apex:repeat value="{!ManageLinesVatFieldset}" var="f" rendered="{!IF(taxMode=='VAT',true,false)}">
											<apex:variable var="fieldName" value="{!f.localName}_STRING"/>  
											<td class="{!f.fieldType} {!IF(f.calculated==false,'inputCell','')} {!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING',fieldName='TaxRate3__c_STRING'),'hiddenCell','')}"
											html-data-required="{!f.fieldSetRequired}" html-data-role="{!fieldName}"> 
												<div class="{!f.localName} {!f.fieldType} {!IF(f.calculated==false,'cellInner','cellInnerText')}">
													
													<apex:inputField value="{!viewLine.line[f.localName]}" html-data-role="{!fieldName}"
													styleClass="input input_{!f.localName} {!IF(!f.fieldSetRequired,'js-required','')}" required="{!OR(f.fieldSetRequired, f.fieldSetDbRequired)}"
														onchange="ML.populateRequiredLookUpFields(this)">
														<apex:message />
													</apex:inputField>
												</div>
											</td> 
										</apex:repeat>
										
										<apex:repeat value="{!ManageLinesSutFieldset}" var="f" rendered="{!IF(taxMode=='SUT',true,false)}">
										 	<apex:variable var="fieldName" value="{!f.localName}_STRING"/>
										 	<td class="{!f.fieldType} {!IF(f.calculated==false,'inputCell','')} {!IF(!IsAllowOverrideOfTaxValues && (OR(fieldName='TaxValue1__c_STRING',fieldName='TaxValue2__c_STRING',fieldName='TaxValue3__c_STRING')),'hiddenCell','')}"
										 	html-data-required="{!f.fieldSetRequired}" html-data-role="{!fieldName}">  
												<div class="{!f.localName} {!f.fieldType} {!IF(f.calculated==false,'cellInner','cellInnerText')}">
												
													<apex:inputField value="{!viewLine.line[f.localName]}" html-data-role="{!fieldName}"
													styleClass="input input_{!f.localName} {!IF(!f.fieldSetRequired,'js-required','')}" required="{!OR(f.fieldSetRequired, f.fieldSetDbRequired)}"
														onchange="ML.populateRequiredLookUpFields(this)">
														<apex:message />
													</apex:inputField>
												</div>
											</td>
										</apex:repeat>
	
										<apex:repeat value="{!ManageLinesCombFieldset}" var="f" rendered="{!taxMode=='COMB'}">
											<apex:variable var="fieldName" value="{!f.localName}_STRING" />
											<td class="{!f.fieldType} {!IF(f.calculated==false,'inputCell','')} {!IF(OR(fieldName='TaxRate1__c_STRING',fieldName='TaxRate2__c_STRING'),'hiddenCell','')}"
											html-data-required="{!f.fieldSetRequired}" html-data-role="{!fieldName}">
												<div class="{!f.localName} {!f.fieldType} {!IF(f.calculated==false,'cellInner','cellInnerText')}">
													<apex:inputField value="{!viewLine.line[f.localName]}" styleClass="input input_{!f.localName} {!IF(!f.fieldSetRequired,'js-required','')}"
													required="{!OR(f.fieldSetRequired, f.fieldSetDbRequired)}">
														<apex:message />
													</apex:inputField>
												</div>
											</td>
										</apex:repeat>
									
										<td class="aCenter" width="30">
											<a href="#" class="removeLine" title="{!$Label.RemoveLine}">{!$Label.RemoveLine}</a>
										</td>
										
									</tr>
									
								</apex:repeat>
							</tbody>
							
							<tfoot>
								<tr>
									<td></td>
									<td rowSpan="3">
										<div class="cellInnerText">
											<input type="button" onclick="addLine()" class="newlinebutton" value="{!$Label.codaNewLine}"/>
										</div>
									</td>
									<td colspan="{!fieldsInFieldSet-3}"></td>
									<td class="aRight">
										<div class="cellInnerText">{!$ObjectType.codaInvoice__c.fields.NetTotal__c.label}</div>
									</td>
									<td class="aRight">
										<div class="cellInnerText" id="subTotal">0.00</div>
									</td>
									<td>&nbsp;</td>
								</tr>
								<tr>
									<td></td>
									<td colspan="{!fieldsInFieldSet-3}"></td>
									<td class="aRight">
										<div class="cellInnerText">{!$ObjectType.codaInvoice__c.fields.TaxTotal__c.label}</div>
									</td>
									<td class="aRight">
										<div class="cellInnerText" id="taxTotal">0.00</div>
									</td>
									<td>&nbsp;</td>
								</tr>
								<tr>
									<td></td>
									<td colspan="{!fieldsInFieldSet-3}"></td>
									<td class="aRight">
										<div class="cellInnerText">{!$ObjectType.codaInvoice__c.fields.InvoiceTotal__c.label}</div>
									</td>
									<td class="aRight">
										<div class="cellInnerText total" id="invoiceTotal">0.00</div>
									</td>
									<td>&nbsp;</td>
								</tr>
							</tfoot>
						</table>
					</div>
					<script>
						$FFDC(document).ready(function () {
							gridSetup();
						});
					</script>
				</apex:outputPanel>
				
				<div id="defaultRowFields" class="defaultRowFields">
			 		<apex:repeat value="{!$ObjectType.c2g__codaInvoiceLineItem__c.fieldsets.c2g__ManageLinesVAT}" var="f" rendered="{!IF(taxMode=='VAT',true,false)}">
						<div html-data-role="{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f].localName}_STRING">input_{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f].label}:<apex:inputField value="{!defaultSalesInvoiceLine[f]}" styleClass="input input_{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f].localName}"/></div>
					</apex:repeat>
					
					<apex:repeat value="{!$ObjectType.c2g__codaInvoiceLineItem__c.fieldsets.c2g__ManageLinesSUT}" var="f" rendered="{!IF(taxMode=='SUT',true,false)}">
						<div html-data-role="{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f].localName}_STRING">input_{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f].label}:<apex:inputField value="{!defaultSalesInvoiceLine[f]}" styleClass="input input_{!$ObjectType.c2g__codaInvoiceLineItem__c.fields[f].localName}"/></div>
					</apex:repeat>
				</div>
	        </apex:pageBlock>

	</apex:form>
</apex:page>